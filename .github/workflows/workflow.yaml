name: Continuous integration
on: [push]
env:
  # Bump this number to invalidate the GH actions cache
  cache-version: 0

jobs:
  test-nixpkgs:
    name: Build & Test - Nixpkgs
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Mount Bazel cache
        uses: actions/cache@v2
        with:
          path: ~/repo-cache
          key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}
      - uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=./nixpkgs.nix
      - name: Configure
        env:
          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}
        run: |
          cat >.bazelrc.local <<EOF
          build --host_platform=@io_tweag_rules_nixpkgs//nixpkgs/platforms:host
          build --bes_results_url=https://app.buildbuddy.io/invocation/
          build --bes_backend=grpcs://cloud.buildbuddy.io
          build --remote_cache=grpcs://cloud.buildbuddy.io
          build --remote_header=x-buildbuddy-api-key="$BUILDBUDDY_API_KEY"
          build --repository_cache=~/repo-cache/
          EOF
          ln -s ../.bazelrc.local example/.bazelrc.local
          ln -s ../../.bazelrc.local tests/alternative-deps/.bazelrc.local
      - name: Build & test
        run: nix-shell --pure --run 'bazel test --test_output=all //...'
      - name: Test the example
        run: |
          cd example
          nix-shell --pure --run 'bazel run //:gazelle'
          # Gazelle doesn't remove rules by default
          grep -q another-haskell-binary package-a/BUILD.bazel
          nix-shell --pure --run 'bazel run //:gazelle -- fix -mode diff' || true
          nix-shell --pure --run 'bazel run //:gazelle -- fix'
          # Test that fix kept and removed the expected rules
          echo "! grep -q another-haskell-binary package-a/BUILD.bazel"
          bash -c "! grep -q another-haskell-binary package-a/BUILD.bazel"
          echo grep -q a-haskell-binary package-a/BUILD.bazel
          grep -q a-haskell-binary package-a/BUILD.bazel
          echo grep -q haskell_toolchain_library package-a/BUILD.bazel
          grep -q haskell_toolchain_library package-a/BUILD.bazel
          # Test sublibrary generation
          bash -cx "grep -q \"sublibPub\" package-b/BUILD.bazel"
          bash -cx "grep -q \"mtl\" package-b/BUILD.bazel"
          # Test sublibrary shadowing
          bash -cx "grep -q \":sublibPub\" package-b/BUILD.bazel"
          bash -cx "grep -q \":mtl\" package-b/BUILD.bazel"
          # Test public internal library feature
          bash -cx "grep -q \"//package-b:sublibPub\" package-a/BUILD.bazel"
          # Test dependency on local libraries (the same name)
          bash -cx "grep -q \":sublibPub\" package-a/BUILD.bazel"
          bash -cx "grep -q \":sublibPriv\" package-a/BUILD.bazel"
          # Test dependency on local libraries (the same name)
          # with experimental colon syntax
          bash -cx "grep -q \":colonPub\" package-a/BUILD.bazel"
          bash -cx "grep -q \":colonPriv\" package-a/BUILD.bazel"
          # Test existence of package-b main lib dependency
          # referenced with colon syntax: package-b:package-b
          bash -cx "grep -q \"//package-b\" package-a/BUILD.bazel"
          # Test existence of package-c main library
          # referenced without colon syntax: package-c
          bash -cx "grep -q \"//package-c\" package-a/BUILD.bazel"
          # Test that unknown libraries referenced with colon syntax
          # are resolved from repository
          bash -cx "grep -q \"@stackage//:tasty\" package-a/BUILD.bazel"
          # Test sublibrary local dependency resolution
          # mtl must be taken from repo not from package-b
          bash -cx "grep -q \"@stackage//:mtl\" package-a/BUILD.bazel"
          bash -cx "! grep -q \"//package-b:mtl\" package-a/BUILD.bazel"
          # Test that colon syntax allows to reference both
          # local and other package dependency
          bash -cx "grep -q \":mtl\" package-b/BUILD.bazel"
          bash -cx "grep -q \"//package-c:mtl\" package-b/BUILD.bazel"
          # Test gazelle-update-repos
          nix-shell --pure --run 'bazel run //:gazelle-update-repos'
          nix-shell --pure --run 'bazel test //...'          cd example; nix-shell --pure --run 'bazel run //:gazelle'
      - name: Test alternative dependencies
        run: |
          cd tests/alternative-deps
          nix-shell --pure --run 'bazel run //:gazelle'
          nix-shell --pure --run 'bazel run //:gazelle-update-repos'
          nix-shell --pure --run 'bazel test //...'      - name: Build & run gazelle with alternative dependencies
      - name: Test for buildifier suggestions
        run: nix-shell --pure --run 'bazel run //:buildifier-diff'
