module(name = "gazelle_cabal_example")

bazel_dep(name = "gazelle_cabal", repo_name = "io_tweag_gazelle_cabal")
local_path_override(
    module_name = "gazelle_cabal",
    path = "..",
)

bazel_dep(name = "rules_haskell", version = "0.19")
bazel_dep(name = "rules_haskell_nix")
bazel_dep(name = "rules_go", version = "0.41.0", repo_name = "io_bazel_rules_go")
bazel_dep(name = "gazelle", version = "0.37.0", repo_name = "bazel_gazelle")

GHC_VERSION = "9.4.5"

stack_snapshot = use_extension(
    "@rules_haskell//extensions:stack_snapshot.bzl",
    "stack_snapshot",
)
use_repo(stack_snapshot, "stackage", "stackage-exe")
stack_snapshot.snapshot(local_snapshot = "@io_tweag_gazelle_cabal//:snapshot-%s.yaml" % GHC_VERSION)

# TODO these should be generated by Gazelle
stack_snapshot.package(name = "base")
stack_snapshot.package(name = "inspection-testing")
stack_snapshot.package(name = "mtl")
stack_snapshot.package(name = "tasty")
stack_snapshot.package(
    name = "tasty-discover",
    components = [
        "lib",
        "exe:tasty-discover",
    ],
)
stack_snapshot.package(name = "tasty-hunit")
stack_snapshot.package(name = "text")
stack_snapshot.package(name = "void")

# TODO replace this once a proper public interface for Nix provided Haskell toolchains exists.
nix_haskell_toolchains = use_extension(
    "@rules_haskell_nix//extensions:nix_haskell_toolchains.bzl",
    "nix_haskell_toolchains",
)
nix_haskell_toolchains.new(
    attribute_path = "haskell.compiler.ghc" + GHC_VERSION.replace(".", ""),
    repository = "@nixpkgs",
    version = GHC_VERSION,
)
use_repo(
    nix_haskell_toolchains,
    "nix_haskell_toolchains_configurations",
    # TODO register via rules_nixpkgs_posix once supported.
    "all_posix_toolchains",
)

# TODO remove this once a proper public interface for Nix provided Haskell toolchain exists.
declare_nix_toolchains = use_extension(
    "@rules_haskell_nix//private:declare_toolchains.bzl",
    "declare_nix_toolchains",
)
use_repo(
    declare_nix_toolchains,
    "all_nix_toolchains",
)

register_toolchains(
    "@all_nix_toolchains//:all",
    "@all_posix_toolchains//:all",
)

# TODO Remove once rules_haskell_nix is in the BCR.
RULES_HASKELL_REV = "0.18"

RULES_HASKELL_INTEGRITY = "sha256-0fDhvU8dXiSLKIK/3HwxoUYRL52FudLw73fnjQLsukU="

archive_override(
    module_name = "rules_haskell_nix",
    integrity = RULES_HASKELL_INTEGRITY,
    strip_prefix = "rules_haskell-%s/rules_haskell_nix" % RULES_HASKELL_REV,
    urls = ["https://github.com/tweag/rules_haskell/releases/download/v{REV}/rules_haskell-{REV}.tar.gz".format(REV = RULES_HASKELL_REV)],
)

# Needed for custom toolchain definitions in non_module_deps.
# TODO update once a bzlmod API for Nix provided toolchains exists.
bazel_dep(name = "rules_nixpkgs_core")
bazel_dep(name = "rules_nixpkgs_cc")
bazel_dep(name = "rules_nixpkgs_posix")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "rules_cc", version = "0.0.9")

# TODO Remove once rules_nixpkgs is in the BCR.
RULES_NIXPKGS_REV = "7e627d76ba65d6c42586fc265e46bd370672b4eb"

RULES_NIXPKGS_INTEGRITY = "sha384-N2bS5BvSk8QMjhmuxdeeve9PBJUTwFOHufMV4sDgaviwXNdCGc7JaJPqwqZV1TbC"

archive_override(
    module_name = "rules_nixpkgs_core",
    integrity = RULES_NIXPKGS_INTEGRITY,
    strip_prefix = "rules_nixpkgs-%s/core" % RULES_NIXPKGS_REV,
    urls = ["https://github.com/tweag/rules_nixpkgs/archive/%s.tar.gz" % RULES_NIXPKGS_REV],
)

archive_override(
    module_name = "rules_nixpkgs_cc",
    integrity = RULES_NIXPKGS_INTEGRITY,
    strip_prefix = "rules_nixpkgs-%s/toolchains/cc" % RULES_NIXPKGS_REV,
    urls = ["https://github.com/tweag/rules_nixpkgs/archive/%s.tar.gz" % RULES_NIXPKGS_REV],
)

archive_override(
    module_name = "rules_nixpkgs_posix",
    integrity = RULES_NIXPKGS_INTEGRITY,
    strip_prefix = "rules_nixpkgs-%s/toolchains/posix" % RULES_NIXPKGS_REV,
    urls = ["https://github.com/tweag/rules_nixpkgs/archive/%s.tar.gz" % RULES_NIXPKGS_REV],
)

non_module_deps = use_extension("//:non_module_deps.bzl", "non_module_deps")
use_repo(non_module_deps, "nixpkgs")
use_repo(non_module_deps, "nixpkgs_config_cc")
use_repo(non_module_deps, "nixpkgs_config_cc_info")
use_repo(non_module_deps, "nixpkgs_config_cc_toolchains")
use_repo(non_module_deps, "zlib.dev")

register_toolchains("@nixpkgs_config_cc_toolchains//:all")
